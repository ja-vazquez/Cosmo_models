## File automatically generated by DeepZot`CosmoTools`exportToCamb on Wed 30 Oct 2013 10:41:00
## Recreate the cosmology that generated this file using:
## createCosmology[DR9LyaMocksLCDM,{"h" -> 0.7, "ΩΛ" -> Automatic, "Ωm" -> 0.27, "Ωbh2" -> 0.0227, "w0" -> -1, "wa" -> 0, "Ωk" -> 0, "Tcmb" -> 2.7255, "Nnu" -> 3.046, "NnuMassive" -> 1, "mnu" -> 0.06, "ns" -> 0.97, "amps" -> 2.215*^-9, "kpivot" -> 0.05, "retau" -> 0.0925, "YP" -> 0.247695}]
use_physical = T
hubble = 70.
ombh2 = 0.0227
omch2 = 0.10895511607910577
omnuh2 = 0.0006448839208942391
omk = 0
w = -1
temp_cmb = 2.7255
massless_neutrinos = 2.0306666666666664
massive_neutrinos  = 1.0
#153333333333332
helium_fraction = 0.247695
scalar_amp(1) = 2.215e-9
scalar_spectral_index(1) = 0.97
pivot_scalar = 0.05
re_optical_depth = 0.0925
output_root = /Users/david/Cosmo/LyAlpha/code/baofit/models/DR9LyaMocksLCDM
transfer_kmax = 1000
transfer_k_per_logint = 0
transfer_num_redshifts = 3
transfer_redshift(1) = 2.3
transfer_filename(1) = transfer_1.dat
transfer_matterpower(1) = matterpower_1.dat
transfer_redshift(2) = 0.57
transfer_filename(2) = transfer_2.dat
transfer_matterpower(2) = matterpower_2.dat
transfer_redshift(3) = 0
transfer_filename(3) = transfer_3.dat
transfer_matterpower(3) = matterpower_3.dat
# Boilerplate parameters for running CAMB (July 2013 version)
nu_mass_eigenstates = 1
nu_mass_degeneracies = 0  
nu_mass_fractions = 1
#What to do
get_scalar_cls = F
get_vector_cls = F
get_tensor_cls = F
get_transfer   = T
#if do_lensing then scalar_output_file contains additional columns of l^4 C_l^{pp} and l^3 C_l^{pT}
#where p is the projected potential. Output lensed CMB Cls (without tensors) are in lensed_output_file below.
do_lensing     = F
# 0: linear, 1: non-linear matter power (HALOFIT), 2: non-linear CMB lensing (HALOFIT)
do_nonlinear = 0
#Maximum multipole and k*eta. 
#  Note that C_ls near l_max are inaccurate (about 5%), go to 50 more than you need
#  Lensed power spectra are computed to l_max_scalar-100 
#  To get accurate lensed BB need to have l_max_scalar>2000, k_eta_max_scalar > 10000
#  Otherwise k_eta_max_scalar=2*l_max_scalar usually suffices, or don't set to use default
l_max_scalar      = 2200
#k_eta_max_scalar  = 4000
#  Tensor settings should be less than or equal to the above
l_max_tensor      = 1500
k_eta_max_tensor  = 3000
#constant comoving sound speed of the dark energy (1=quintessence)
cs2_lam        = 1
#Initial power spectrum, amplitude, spectral index and running. Pivot k in Mpc^{-1}.
initial_power_num         = 1
pivot_tensor              = 0.05
scalar_nrun(1)            = 0
tensor_spectral_index(1)  = 0
#ratio is that of the initial tens/scal power spectrum amplitudes
initial_ratio(1)          = 1
#note vector modes use the scalar settings above
#Reionization, ignored unless reionization = T, re_redshift measures where x_e=0.5
reionization         = T
re_use_optical_depth = T
##re_optical_depth     = 0.09
#If re_use_optical_depth = F then use following, otherwise ignored
re_redshift          = 11
#width of reionization transition. CMBFAST model was similar to re_delta_redshift~0.5.
re_delta_redshift    = 1.5
#re_ionization_frac=-1 sets to become fully ionized using YHe to get helium contribution
#Otherwise x_e varies from 0 to re_ionization_frac
re_ionization_frac   = -1
#RECFAST 1.5.x recombination parameters;
RECFAST_fudge = 1.14
RECFAST_fudge_He = 0.86
RECFAST_Heswitch = 6
RECFAST_Hswitch  = T
#Initial scalar perturbation mode (adiabatic=1, CDM iso=2, Baryon iso=3, 
# neutrino density iso =4, neutrino velocity iso = 5) 
initial_condition   = 1
#If above is zero, use modes in the following (totally correlated) proportions
#Note: we assume all modes have the same initial power spectrum
initial_vector = -1 0 0 0 0
#For vector modes: 0 for regular (neutrino vorticity mode), 1 for magnetic
vector_mode = 0
#Normalization
COBE_normalize = F
##CMB_outputscale scales the output Cls
#To get MuK^2 set realistic initial amplitude (e.g. scalar_amp(1) = 2.3e-9 above) and
#otherwise for dimensionless transfer functions set scalar_amp(1)=1 and use
#CMB_outputscale = 1
CMB_outputscale = 7.42835025e12 
#Transfer function settings, transfer_kmax=0.5 is enough for sigma_8
#transfer_k_per_logint=0 sets sensible non-even sampling; 
#transfer_k_per_logint=5 samples fixed spacing in log-k
#transfer_interp_matterpower =T produces matter power in regular interpolated grid in log k; 
# use transfer_interp_matterpower =F to output calculated values (e.g. for later interpolation)
transfer_high_precision = T
transfer_interp_matterpower = T
#Output files not produced if blank. make camb_fits to use use the FITS setting.
scalar_output_file = scalCls.dat
vector_output_file = vecCls.dat
tensor_output_file = tensCls.dat
total_output_file  = totCls.dat
lensed_output_file = lensedCls.dat
lensed_total_output_file  =lensedtotCls.dat
lens_potential_output_file = lenspotentialCls.dat
FITS_filename      = scalCls.fits
#Bispectrum parameters if required; primordial is currently only local model (fnl=1)
#lensing is fairly quick, primordial takes several minutes on quad core
do_lensing_bispectrum = F
do_primordial_bispectrum = F
#1 for just temperature, 2 with E
bispectrum_nfields = 1
#set slice non-zero to output slice b_{bispectrum_slice_base_L L L+delta}
bispectrum_slice_base_L = 0
bispectrum_ndelta=3
bispectrum_delta(1)=0
bispectrum_delta(2)=2
bispectrum_delta(3)=4
#bispectrum_do_fisher estimates errors and correlations between bispectra
#note you need to compile with LAPACK and FISHER defined to use get the Fisher info
bispectrum_do_fisher= F
#Noise is in muK^2, e.g. 2e-4 roughly for Planck temperature
bispectrum_fisher_noise=0
bispectrum_fisher_noise_pol=0
bispectrum_fisher_fwhm_arcmin=7
#Filename if you want to write full reduced bispectrum (at sampled values of l_1)
bispectrum_full_output_file=
bispectrum_full_output_sparse=F
#Export alpha_l(r), beta_l(r) for local non-Gaussianity
bispectrum_export_alpha_beta=F
##Optional parameters to control the computation speed,accuracy and feedback
#If feedback_level > 0 print out useful information computed about the model
feedback_level = 1
#write out various derived parameters
derived_parameters = T
# 1: curved correlation function, 2: flat correlation function, 3: inaccurate harmonic method
lensing_method = 1
accurate_BB = F
#massive_nu_approx: 0 - integrate distribution function
#                   1 - switch to series in velocity weight once non-relativistic
massive_nu_approx = 1
#Whether you are bothered about polarization. 
accurate_polarization   = T
#Whether you are bothered about percent accuracy on EE from reionization
accurate_reionization   = T
#whether or not to include neutrinos in the tensor evolution equations
do_tensor_neutrinos     = T
#Whether to turn off small-scale late time radiation hierarchies (save time,v. accurate)
do_late_rad_truncation   = T
#Computation parameters
#if number_of_threads=0 assigned automatically
number_of_threads       = 0
#Default scalar accuracy is about 0.3% (except lensed BB) if high_accuracy_default=F
#If high_accuracy_default=T the default taget accuracy is 0.1% at L>600 (with boost parameter=1 below)
#Try accuracy_boost=2, l_accuracy_boost=2 if you want to check stability/even higher accuracy
#Note increasing accuracy_boost parameters is very inefficient if you want higher accuracy,
#but high_accuracy_default is efficient 
high_accuracy_default=T
#Increase accuracy_boost to decrease time steps, use more k values,  etc.
#Decrease to speed up at cost of worse accuracy. Suggest 0.8 to 3.
accuracy_boost          = 1
#Larger to keep more terms in the hierarchy evolution. 
l_accuracy_boost        = 1
#Increase to use more C_l values for interpolation.
#Increasing a bit will improve the polarization accuracy at l up to 200 -
#interpolation errors may be up to 3%
#Decrease to speed up non-flat models a bit
l_sample_boost          = 1

